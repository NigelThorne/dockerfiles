server {
    listen 80;

    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Protocol $scheme;

    proxy_read_timeout 30;
    proxy_connect_timeout 10;

    resolver 8.8.8.8;

    location / {
        set $target "";

        access_by_lua '
            local client = ngx.var.http_host
            local params = {
                host = "redis",
                port = 6379,
            }
            local redis = require "redis"
            local r = redis.connect(params)

            if r:ping() then
                local upstream = r:get(client)
                if upstream then
                    ngx.var.target = ngx.var.scheme .. "://" .. upstream
                else
                    ngx.log(ngx.ERR, "No upstream set for ", client, " on redis")
                    return ngx.exit(500)
                end
            else
                ngx.log(ngx.INFO, "Failed to connect to redis. Trying with shared_dict")
                local upstreams = ngx.shared.upstreams
                local upstream = upstreams:get(client)
                if upstream then
                    ngx.var.target = ngx.var.scheme .. "://" .. upstream
                else
                    ngx.log(ngx.ERR, "No upstream set for ", client, " on shared_dict")
                    return ngx.exit(500)
                end
            end
        ';
        proxy_pass $target;
    }
}

server {
    listen 80;
    server_name ~^(api\.)(?<domain>.+)$;

    location ~ ^/set/(?<from>[^/]+)/(?<to>[^/]+)$ {
        add_header Content-Type text/plain;
        content_by_lua '
            local from = ngx.var.from
            local to = ngx.var.to

            local params = {
                host = "redis",
                port = 6379,
            }
            local redis = require "redis"
            local r = redis.connect(params)

            if r:ping() then
                ngx.log(ngx.INFO, "Setting upstream on redis.")
                local upstream = r:set(from, to)
                ngx.say("OK")
            else
                ngx.log(ngx.INFO, "Failed to connect to redis. Trying with shared_dict")

                local u = ngx.shared.upstreams
                local upstream = u:set(from, to)
                ngx.say("OK")
            end
       ';
    }
}
